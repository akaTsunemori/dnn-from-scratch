searchState.loadedDescShard("dnn_from_scratch", 0, "Neural Network Library\nLoss Module\nNeural Network Module\nReport Module\nClassification and Regression Utility Module\nThe <code>Loss</code> structure encapsulates the selected loss function …\nComputes the categorical cross-entropy loss.\nComputes the loss value for the given output and target …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the mean squared error (MSE) loss.\nCreates a new <code>Loss</code> instance with the specified loss type.\nComputes the root mean squared error (RMSE) loss.\nRepresents a feedforward neural network.\nAdds a new fully connected layer to the network.\nPerforms backpropagation through the network and adjusts …\nPerforms a forward pass through the network, passing the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the <code>NeuralNetwork</code>.\nStruct to store and manage training and testing data for …\nAdds a new set of metrics (train loss, train error, test …\nReturns the argument unchanged.\nRetrieves the errors (training and testing errors) from …\nRetrieves the losses (training and testing losses) from …\nCalls <code>U::from(self)</code>.\nChecks if the <code>ReportData</code> is empty (i.e., no data has been …\nCreates a new <code>ReportData</code> object to store training and …\nPrints a formatted report for the current epoch, including …\nSaves the training history and report to a file within a …\nSaves the entire training history (losses and errors) to a …\nRepresents the <code>Classification</code> struct, which provides …\nRepresents the <code>Regression</code> struct, which provides methods …\nPerform argmax on a 2D array along a given axis (0 for …\nCompute the accuracy of a classification model.\nCalculate the cumulative distribution of errors (RMSE) in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")